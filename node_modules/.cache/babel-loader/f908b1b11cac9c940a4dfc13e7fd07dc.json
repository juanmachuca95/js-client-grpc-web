{"ast":null,"code":"/**\n * @fileoverview gRPC-Web generated client stub for \n * @enhanceable\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar grpc = {};\ngrpc.web = require('grpc-web');\n\nvar proto = require('./subastas_pb.js');\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.ClienteServiceClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n};\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.ClienteServicePromiseClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n};\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.ClienteId,\n *   !proto.Cliente>}\n */\n\n\nvar methodDescriptor_ClienteService_GetCliente = new grpc.web.MethodDescriptor('/ClienteService/GetCliente', grpc.web.MethodType.UNARY, proto.ClienteId, proto.Cliente,\n/**\n * @param {!proto.ClienteId} request\n * @return {!Uint8Array}\n */\nfunction (request) {\n  console.log(request);\n  return request.serializeBinary();\n}, proto.Cliente.deserializeBinary);\n/**\n * @param {!proto.ClienteId} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.Cliente)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.Cliente>|undefined}\n *     The XHR Node Readable Stream\n */\n\nproto.ClienteServiceClient.prototype.getCliente = function (request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ + '/ClienteService/GetCliente', request, metadata || {}, methodDescriptor_ClienteService_GetCliente, callback);\n};\n/**\n * @param {!proto.ClienteId} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.Cliente>}\n *     Promise that resolves to the response\n */\n\n\nproto.ClienteServicePromiseClient.prototype.getCliente = function (request, metadata) {\n  return this.client_.unaryCall(this.hostname_ + '/ClienteService/GetCliente', request, metadata || {}, methodDescriptor_ClienteService_GetCliente);\n};\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.ProductoServiceClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n};\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.ProductoServicePromiseClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n};\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.CreateProductoReq,\n *   !proto.Producto>}\n */\n\n\nvar methodDescriptor_ProductoService_Create = new grpc.web.MethodDescriptor('/ProductoService/Create', grpc.web.MethodType.UNARY, proto.CreateProductoReq, proto.Producto,\n/**\n * @param {!proto.CreateProductoReq} request\n * @return {!Uint8Array}\n */\nfunction (request) {\n  return request.serializeBinary();\n}, proto.Producto.deserializeBinary);\n/**\n * @param {!proto.CreateProductoReq} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.Producto)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.Producto>|undefined}\n *     The XHR Node Readable Stream\n */\n\nproto.ProductoServiceClient.prototype.create = function (request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ + '/ProductoService/Create', request, metadata || {}, methodDescriptor_ProductoService_Create, callback);\n};\n/**\n * @param {!proto.CreateProductoReq} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.Producto>}\n *     Promise that resolves to the response\n */\n\n\nproto.ProductoServicePromiseClient.prototype.create = function (request, metadata) {\n  return this.client_.unaryCall(this.hostname_ + '/ProductoService/Create', request, metadata || {}, methodDescriptor_ProductoService_Create);\n};\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.SubastaServiceClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n};\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.SubastaServicePromiseClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n};\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.SubastaId,\n *   !proto.Subasta>}\n */\n\n\nvar methodDescriptor_SubastaService_GetSubasta = new grpc.web.MethodDescriptor('/SubastaService/GetSubasta', grpc.web.MethodType.UNARY, proto.SubastaId, proto.Subasta,\n/**\n * @param {!proto.SubastaId} request\n * @return {!Uint8Array}\n */\nfunction (request) {\n  return request.serializeBinary();\n}, proto.Subasta.deserializeBinary);\n/**\n * @param {!proto.SubastaId} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.Subasta)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.Subasta>|undefined}\n *     The XHR Node Readable Stream\n */\n\nproto.SubastaServiceClient.prototype.getSubasta = function (request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ + '/SubastaService/GetSubasta', request, metadata || {}, methodDescriptor_SubastaService_GetSubasta, callback);\n};\n/**\n * @param {!proto.SubastaId} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.Subasta>}\n *     Promise that resolves to the response\n */\n\n\nproto.SubastaServicePromiseClient.prototype.getSubasta = function (request, metadata) {\n  return this.client_.unaryCall(this.hostname_ + '/SubastaService/GetSubasta', request, metadata || {}, methodDescriptor_SubastaService_GetSubasta);\n};\n\nmodule.exports = proto;","map":{"version":3,"sources":["/home/juan/node_projects/js-client/src/pb/subastas_grpc_web_pb.js"],"names":["grpc","web","require","proto","ClienteServiceClient","hostname","credentials","options","format","client_","GrpcWebClientBase","hostname_","ClienteServicePromiseClient","methodDescriptor_ClienteService_GetCliente","MethodDescriptor","MethodType","UNARY","ClienteId","Cliente","request","console","log","serializeBinary","deserializeBinary","prototype","getCliente","metadata","callback","rpcCall","unaryCall","ProductoServiceClient","ProductoServicePromiseClient","methodDescriptor_ProductoService_Create","CreateProductoReq","Producto","create","SubastaServiceClient","SubastaServicePromiseClient","methodDescriptor_SubastaService_GetSubasta","SubastaId","Subasta","getSubasta","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AAIA,IAAMA,IAAI,GAAG,EAAb;AACAA,IAAI,CAACC,GAAL,GAAWC,OAAO,CAAC,UAAD,CAAlB;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,kBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,KAAK,CAACC,oBAAN,GACI,UAASC,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AAC3C,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdA,EAAAA,OAAO,CAACC,MAAR,GAAiB,MAAjB;AAEA;AACF;AACA;;AACE,OAAKC,OAAL,GAAe,IAAIT,IAAI,CAACC,GAAL,CAASS,iBAAb,CAA+BH,OAA/B,CAAf;AAEA;AACF;AACA;;AACE,OAAKI,SAAL,GAAiBN,QAAjB;AAED,CAfD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,KAAK,CAACS,2BAAN,GACI,UAASP,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AAC3C,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdA,EAAAA,OAAO,CAACC,MAAR,GAAiB,MAAjB;AAEA;AACF;AACA;;AACE,OAAKC,OAAL,GAAe,IAAIT,IAAI,CAACC,GAAL,CAASS,iBAAb,CAA+BH,OAA/B,CAAf;AAEA;AACF;AACA;;AACE,OAAKI,SAAL,GAAiBN,QAAjB;AAED,CAfD;AAkBA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMQ,0CAA0C,GAAG,IAAIb,IAAI,CAACC,GAAL,CAASa,gBAAb,CACjD,4BADiD,EAEjDd,IAAI,CAACC,GAAL,CAASc,UAAT,CAAoBC,KAF6B,EAGjDb,KAAK,CAACc,SAH2C,EAIjDd,KAAK,CAACe,OAJ2C;AAKjD;AACF;AACA;AACA;AACE,UAASC,OAAT,EAAkB;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,SAAOA,OAAO,CAACG,eAAR,EAAP;AACD,CAZgD,EAajDnB,KAAK,CAACe,OAAN,CAAcK,iBAbmC,CAAnD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApB,KAAK,CAACC,oBAAN,CAA2BoB,SAA3B,CAAqCC,UAArC,GACI,UAASN,OAAT,EAAkBO,QAAlB,EAA4BC,QAA5B,EAAsC;AACxC,SAAO,KAAKlB,OAAL,CAAamB,OAAb,CAAqB,KAAKjB,SAAL,GACxB,4BADG,EAEHQ,OAFG,EAGHO,QAAQ,IAAI,EAHT,EAIHb,0CAJG,EAKHc,QALG,CAAP;AAMD,CARD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxB,KAAK,CAACS,2BAAN,CAAkCY,SAAlC,CAA4CC,UAA5C,GACI,UAASN,OAAT,EAAkBO,QAAlB,EAA4B;AAC9B,SAAO,KAAKjB,OAAL,CAAaoB,SAAb,CAAuB,KAAKlB,SAAL,GAC1B,4BADG,EAEHQ,OAFG,EAGHO,QAAQ,IAAI,EAHT,EAIHb,0CAJG,CAAP;AAKD,CAPD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,KAAK,CAAC2B,qBAAN,GACI,UAASzB,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AAC3C,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdA,EAAAA,OAAO,CAACC,MAAR,GAAiB,MAAjB;AAEA;AACF;AACA;;AACE,OAAKC,OAAL,GAAe,IAAIT,IAAI,CAACC,GAAL,CAASS,iBAAb,CAA+BH,OAA/B,CAAf;AAEA;AACF;AACA;;AACE,OAAKI,SAAL,GAAiBN,QAAjB;AAED,CAfD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,KAAK,CAAC4B,4BAAN,GACI,UAAS1B,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AAC3C,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdA,EAAAA,OAAO,CAACC,MAAR,GAAiB,MAAjB;AAEA;AACF;AACA;;AACE,OAAKC,OAAL,GAAe,IAAIT,IAAI,CAACC,GAAL,CAASS,iBAAb,CAA+BH,OAA/B,CAAf;AAEA;AACF;AACA;;AACE,OAAKI,SAAL,GAAiBN,QAAjB;AAED,CAfD;AAkBA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAM2B,uCAAuC,GAAG,IAAIhC,IAAI,CAACC,GAAL,CAASa,gBAAb,CAC9C,yBAD8C,EAE9Cd,IAAI,CAACC,GAAL,CAASc,UAAT,CAAoBC,KAF0B,EAG9Cb,KAAK,CAAC8B,iBAHwC,EAI9C9B,KAAK,CAAC+B,QAJwC;AAK9C;AACF;AACA;AACA;AACE,UAASf,OAAT,EAAkB;AAChB,SAAOA,OAAO,CAACG,eAAR,EAAP;AACD,CAX6C,EAY9CnB,KAAK,CAAC+B,QAAN,CAAeX,iBAZ+B,CAAhD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApB,KAAK,CAAC2B,qBAAN,CAA4BN,SAA5B,CAAsCW,MAAtC,GACI,UAAShB,OAAT,EAAkBO,QAAlB,EAA4BC,QAA5B,EAAsC;AACxC,SAAO,KAAKlB,OAAL,CAAamB,OAAb,CAAqB,KAAKjB,SAAL,GACxB,yBADG,EAEHQ,OAFG,EAGHO,QAAQ,IAAI,EAHT,EAIHM,uCAJG,EAKHL,QALG,CAAP;AAMD,CARD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxB,KAAK,CAAC4B,4BAAN,CAAmCP,SAAnC,CAA6CW,MAA7C,GACI,UAAShB,OAAT,EAAkBO,QAAlB,EAA4B;AAC9B,SAAO,KAAKjB,OAAL,CAAaoB,SAAb,CAAuB,KAAKlB,SAAL,GAC1B,yBADG,EAEHQ,OAFG,EAGHO,QAAQ,IAAI,EAHT,EAIHM,uCAJG,CAAP;AAKD,CAPD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7B,KAAK,CAACiC,oBAAN,GACI,UAAS/B,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AAC3C,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdA,EAAAA,OAAO,CAACC,MAAR,GAAiB,MAAjB;AAEA;AACF;AACA;;AACE,OAAKC,OAAL,GAAe,IAAIT,IAAI,CAACC,GAAL,CAASS,iBAAb,CAA+BH,OAA/B,CAAf;AAEA;AACF;AACA;;AACE,OAAKI,SAAL,GAAiBN,QAAjB;AAED,CAfD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,KAAK,CAACkC,2BAAN,GACI,UAAShC,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AAC3C,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdA,EAAAA,OAAO,CAACC,MAAR,GAAiB,MAAjB;AAEA;AACF;AACA;;AACE,OAAKC,OAAL,GAAe,IAAIT,IAAI,CAACC,GAAL,CAASS,iBAAb,CAA+BH,OAA/B,CAAf;AAEA;AACF;AACA;;AACE,OAAKI,SAAL,GAAiBN,QAAjB;AAED,CAfD;AAkBA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMiC,0CAA0C,GAAG,IAAItC,IAAI,CAACC,GAAL,CAASa,gBAAb,CACjD,4BADiD,EAEjDd,IAAI,CAACC,GAAL,CAASc,UAAT,CAAoBC,KAF6B,EAGjDb,KAAK,CAACoC,SAH2C,EAIjDpC,KAAK,CAACqC,OAJ2C;AAKjD;AACF;AACA;AACA;AACE,UAASrB,OAAT,EAAkB;AAChB,SAAOA,OAAO,CAACG,eAAR,EAAP;AACD,CAXgD,EAYjDnB,KAAK,CAACqC,OAAN,CAAcjB,iBAZmC,CAAnD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApB,KAAK,CAACiC,oBAAN,CAA2BZ,SAA3B,CAAqCiB,UAArC,GACI,UAAStB,OAAT,EAAkBO,QAAlB,EAA4BC,QAA5B,EAAsC;AACxC,SAAO,KAAKlB,OAAL,CAAamB,OAAb,CAAqB,KAAKjB,SAAL,GACxB,4BADG,EAEHQ,OAFG,EAGHO,QAAQ,IAAI,EAHT,EAIHY,0CAJG,EAKHX,QALG,CAAP;AAMD,CARD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxB,KAAK,CAACkC,2BAAN,CAAkCb,SAAlC,CAA4CiB,UAA5C,GACI,UAAStB,OAAT,EAAkBO,QAAlB,EAA4B;AAC9B,SAAO,KAAKjB,OAAL,CAAaoB,SAAb,CAAuB,KAAKlB,SAAL,GAC1B,4BADG,EAEHQ,OAFG,EAGHO,QAAQ,IAAI,EAHT,EAIHY,0CAJG,CAAP;AAKD,CAPD;;AAUAI,MAAM,CAACC,OAAP,GAAiBxC,KAAjB","sourcesContent":["/**\n * @fileoverview gRPC-Web generated client stub for \n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n\n\n/* eslint-disable */\n// @ts-nocheck\n\n\n\nconst grpc = {};\ngrpc.web = require('grpc-web');\n\nconst proto = require('./subastas_pb.js');\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\nproto.ClienteServiceClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\nproto.ClienteServicePromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.ClienteId,\n *   !proto.Cliente>}\n */\nconst methodDescriptor_ClienteService_GetCliente = new grpc.web.MethodDescriptor(\n  '/ClienteService/GetCliente',\n  grpc.web.MethodType.UNARY,\n  proto.ClienteId,\n  proto.Cliente,\n  /**\n   * @param {!proto.ClienteId} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    console.log(request)\n    return request.serializeBinary();\n  },\n  proto.Cliente.deserializeBinary\n);\n\n\n/**\n * @param {!proto.ClienteId} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.Cliente)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.Cliente>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.ClienteServiceClient.prototype.getCliente =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/ClienteService/GetCliente',\n      request,\n      metadata || {},\n      methodDescriptor_ClienteService_GetCliente,\n      callback);\n};\n\n\n/**\n * @param {!proto.ClienteId} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.Cliente>}\n *     Promise that resolves to the response\n */\nproto.ClienteServicePromiseClient.prototype.getCliente =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/ClienteService/GetCliente',\n      request,\n      metadata || {},\n      methodDescriptor_ClienteService_GetCliente);\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\nproto.ProductoServiceClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\nproto.ProductoServicePromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.CreateProductoReq,\n *   !proto.Producto>}\n */\nconst methodDescriptor_ProductoService_Create = new grpc.web.MethodDescriptor(\n  '/ProductoService/Create',\n  grpc.web.MethodType.UNARY,\n  proto.CreateProductoReq,\n  proto.Producto,\n  /**\n   * @param {!proto.CreateProductoReq} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.Producto.deserializeBinary\n);\n\n\n/**\n * @param {!proto.CreateProductoReq} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.Producto)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.Producto>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.ProductoServiceClient.prototype.create =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/ProductoService/Create',\n      request,\n      metadata || {},\n      methodDescriptor_ProductoService_Create,\n      callback);\n};\n\n\n/**\n * @param {!proto.CreateProductoReq} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.Producto>}\n *     Promise that resolves to the response\n */\nproto.ProductoServicePromiseClient.prototype.create =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/ProductoService/Create',\n      request,\n      metadata || {},\n      methodDescriptor_ProductoService_Create);\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\nproto.SubastaServiceClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\nproto.SubastaServicePromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.SubastaId,\n *   !proto.Subasta>}\n */\nconst methodDescriptor_SubastaService_GetSubasta = new grpc.web.MethodDescriptor(\n  '/SubastaService/GetSubasta',\n  grpc.web.MethodType.UNARY,\n  proto.SubastaId,\n  proto.Subasta,\n  /**\n   * @param {!proto.SubastaId} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.Subasta.deserializeBinary\n);\n\n\n/**\n * @param {!proto.SubastaId} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.Subasta)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.Subasta>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.SubastaServiceClient.prototype.getSubasta =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/SubastaService/GetSubasta',\n      request,\n      metadata || {},\n      methodDescriptor_SubastaService_GetSubasta,\n      callback);\n};\n\n\n/**\n * @param {!proto.SubastaId} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.Subasta>}\n *     Promise that resolves to the response\n */\nproto.SubastaServicePromiseClient.prototype.getSubasta =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/SubastaService/GetSubasta',\n      request,\n      metadata || {},\n      methodDescriptor_SubastaService_GetSubasta);\n};\n\n\nmodule.exports = proto;\n\n"]},"metadata":{},"sourceType":"module"}