{"ast":null,"code":"/**\n * @fileoverview gRPC-Web generated client stub for \n * @enhanceable\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar grpc = {};\ngrpc.web = require('grpc-web');\n\nvar proto = require('./proto_pb.js');\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.EchoServiceClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n};\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.EchoServicePromiseClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n};\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.EchoRequest,\n *   !proto.EchoResponse>}\n */\n\n\nvar methodDescriptor_EchoService_Echo = new grpc.web.MethodDescriptor('/EchoService/Echo', grpc.web.MethodType.UNARY, proto.EchoRequest, proto.EchoResponse,\n/**\n * @param {!proto.EchoRequest} request\n * @return {!Uint8Array}\n */\nfunction (request) {\n  return request.serializeBinary();\n}, proto.EchoResponse.deserializeBinary);\n/**\n * @param {!proto.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.EchoResponse)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.EchoResponse>|undefined}\n *     The XHR Node Readable Stream\n */\n\nproto.EchoServiceClient.prototype.echo = function (request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ + '/EchoService/Echo', request, metadata || {}, methodDescriptor_EchoService_Echo, callback);\n};\n/**\n * @param {!proto.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.EchoResponse>}\n *     Promise that resolves to the response\n */\n\n\nproto.EchoServicePromiseClient.prototype.echo = function (request, metadata) {\n  return this.client_.unaryCall(this.hostname_ + '/EchoService/Echo', request, metadata || {}, methodDescriptor_EchoService_Echo);\n};\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.ServerStreamingEchoRequest,\n *   !proto.ServerStreamingEchoResponse>}\n */\n\n\nvar methodDescriptor_EchoService_ServerStreamingEcho = new grpc.web.MethodDescriptor('/EchoService/ServerStreamingEcho', grpc.web.MethodType.SERVER_STREAMING, proto.ServerStreamingEchoRequest, proto.ServerStreamingEchoResponse,\n/**\n * @param {!proto.ServerStreamingEchoRequest} request\n * @return {!Uint8Array}\n */\nfunction (request) {\n  return request.serializeBinary();\n}, proto.ServerStreamingEchoResponse.deserializeBinary);\n/**\n * @param {!proto.ServerStreamingEchoRequest} request The request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.ServerStreamingEchoResponse>}\n *     The XHR Node Readable Stream\n */\n\nproto.EchoServiceClient.prototype.serverStreamingEcho = function (request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ + '/EchoService/ServerStreamingEcho', request, metadata || {}, methodDescriptor_EchoService_ServerStreamingEcho);\n};\n/**\n * @param {!proto.ServerStreamingEchoRequest} request The request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.ServerStreamingEchoResponse>}\n *     The XHR Node Readable Stream\n */\n\n\nproto.EchoServicePromiseClient.prototype.serverStreamingEcho = function (request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ + '/EchoService/ServerStreamingEcho', request, metadata || {}, methodDescriptor_EchoService_ServerStreamingEcho);\n};\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.EchoStatusRequest,\n *   !proto.EchoStatusResponse>}\n */\n\n\nvar methodDescriptor_EchoService_EchoStatus = new grpc.web.MethodDescriptor('/EchoService/EchoStatus', grpc.web.MethodType.UNARY, proto.EchoStatusRequest, proto.EchoStatusResponse,\n/**\n * @param {!proto.EchoStatusRequest} request\n * @return {!Uint8Array}\n */\nfunction (request) {\n  return request.serializeBinary();\n}, proto.EchoStatusResponse.deserializeBinary);\n/**\n * @param {!proto.EchoStatusRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.EchoStatusResponse)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.EchoStatusResponse>|undefined}\n *     The XHR Node Readable Stream\n */\n\nproto.EchoServiceClient.prototype.echoStatus = function (request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ + '/EchoService/EchoStatus', request, metadata || {}, methodDescriptor_EchoService_EchoStatus, callback);\n};\n/**\n * @param {!proto.EchoStatusRequest} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.EchoStatusResponse>}\n *     Promise that resolves to the response\n */\n\n\nproto.EchoServicePromiseClient.prototype.echoStatus = function (request, metadata) {\n  return this.client_.unaryCall(this.hostname_ + '/EchoService/EchoStatus', request, metadata || {}, methodDescriptor_EchoService_EchoStatus);\n};\n\nmodule.exports = proto;","map":{"version":3,"sources":["/home/juan/node_projects/js-client/src/pb/proto_grpc_web_pb.js"],"names":["grpc","web","require","proto","EchoServiceClient","hostname","credentials","options","format","client_","GrpcWebClientBase","hostname_","EchoServicePromiseClient","methodDescriptor_EchoService_Echo","MethodDescriptor","MethodType","UNARY","EchoRequest","EchoResponse","request","serializeBinary","deserializeBinary","prototype","echo","metadata","callback","rpcCall","unaryCall","methodDescriptor_EchoService_ServerStreamingEcho","SERVER_STREAMING","ServerStreamingEchoRequest","ServerStreamingEchoResponse","serverStreamingEcho","serverStreaming","methodDescriptor_EchoService_EchoStatus","EchoStatusRequest","EchoStatusResponse","echoStatus","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileoverview gRPC-Web generated client stub for \n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n\n\n/* eslint-disable */\n// @ts-nocheck\n\n\n\nconst grpc = {};\ngrpc.web = require('grpc-web');\n\nconst proto = require('./proto_pb.js');\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\nproto.EchoServiceClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?grpc.web.ClientOptions} options\n * @constructor\n * @struct\n * @final\n */\nproto.EchoServicePromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options.format = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.EchoRequest,\n *   !proto.EchoResponse>}\n */\nconst methodDescriptor_EchoService_Echo = new grpc.web.MethodDescriptor(\n  '/EchoService/Echo',\n  grpc.web.MethodType.UNARY,\n  proto.EchoRequest,\n  proto.EchoResponse,\n  /**\n   * @param {!proto.EchoRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.EchoResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.EchoResponse)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.EchoResponse>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.EchoServiceClient.prototype.echo =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/EchoService/Echo',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_Echo,\n      callback);\n};\n\n\n/**\n * @param {!proto.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.EchoResponse>}\n *     Promise that resolves to the response\n */\nproto.EchoServicePromiseClient.prototype.echo =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/EchoService/Echo',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_Echo);\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.ServerStreamingEchoRequest,\n *   !proto.ServerStreamingEchoResponse>}\n */\nconst methodDescriptor_EchoService_ServerStreamingEcho = new grpc.web.MethodDescriptor(\n  '/EchoService/ServerStreamingEcho',\n  grpc.web.MethodType.SERVER_STREAMING,\n  proto.ServerStreamingEchoRequest,\n  proto.ServerStreamingEchoResponse,\n  /**\n   * @param {!proto.ServerStreamingEchoRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.ServerStreamingEchoResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.ServerStreamingEchoRequest} request The request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.ServerStreamingEchoResponse>}\n *     The XHR Node Readable Stream\n */\nproto.EchoServiceClient.prototype.serverStreamingEcho =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/EchoService/ServerStreamingEcho',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_ServerStreamingEcho);\n};\n\n\n/**\n * @param {!proto.ServerStreamingEchoRequest} request The request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.ServerStreamingEchoResponse>}\n *     The XHR Node Readable Stream\n */\nproto.EchoServicePromiseClient.prototype.serverStreamingEcho =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/EchoService/ServerStreamingEcho',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_ServerStreamingEcho);\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.EchoStatusRequest,\n *   !proto.EchoStatusResponse>}\n */\nconst methodDescriptor_EchoService_EchoStatus = new grpc.web.MethodDescriptor(\n  '/EchoService/EchoStatus',\n  grpc.web.MethodType.UNARY,\n  proto.EchoStatusRequest,\n  proto.EchoStatusResponse,\n  /**\n   * @param {!proto.EchoStatusRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.EchoStatusResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.EchoStatusRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.RpcError, ?proto.EchoStatusResponse)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.EchoStatusResponse>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.EchoServiceClient.prototype.echoStatus =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/EchoService/EchoStatus',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_EchoStatus,\n      callback);\n};\n\n\n/**\n * @param {!proto.EchoStatusRequest} request The\n *     request proto\n * @param {?Object<string, string>=} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.EchoStatusResponse>}\n *     Promise that resolves to the response\n */\nproto.EchoServicePromiseClient.prototype.echoStatus =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/EchoService/EchoStatus',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_EchoStatus);\n};\n\n\nmodule.exports = proto;\n\n"]},"metadata":{},"sourceType":"module"}