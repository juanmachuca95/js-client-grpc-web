{"ast":null,"code":"/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\ngoog.exportSymbol('proto.EchoRequest', null, global);\ngoog.exportSymbol('proto.EchoResponse', null, global);\ngoog.exportSymbol('proto.EchoStatusRequest', null, global);\ngoog.exportSymbol('proto.EchoStatusResponse', null, global);\ngoog.exportSymbol('proto.EchoStatusResponse.InternalStatus', null, global);\ngoog.exportSymbol('proto.ServerStreamingEchoRequest', null, global);\ngoog.exportSymbol('proto.ServerStreamingEchoResponse', null, global);\ngoog.exportSymbol('proto.Status', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.EchoRequest = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.EchoRequest, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.EchoRequest.displayName = 'proto.EchoRequest';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.EchoRequest.prototype.toObject = function (opt_includeInstance) {\n    return proto.EchoRequest.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.EchoRequest} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.EchoRequest.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      message: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      value: jspb.Message.getFieldWithDefault(msg, 2, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EchoRequest}\n */\n\n\nproto.EchoRequest.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EchoRequest();\n  return proto.EchoRequest.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EchoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EchoRequest}\n */\n\n\nproto.EchoRequest.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMessage(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setValue(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.EchoRequest.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.EchoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EchoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.EchoRequest.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getValue();\n\n  if (f !== 0) {\n    writer.writeInt32(2, f);\n  }\n};\n/**\n * optional string message = 1;\n * @return {string}\n */\n\n\nproto.EchoRequest.prototype.getMessage = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.EchoRequest.prototype.setMessage = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional int32 value = 2;\n * @return {number}\n */\n\n\nproto.EchoRequest.prototype.getValue = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.EchoRequest.prototype.setValue = function (value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.EchoResponse = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.EchoResponse, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.EchoResponse.displayName = 'proto.EchoResponse';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.EchoResponse.prototype.toObject = function (opt_includeInstance) {\n    return proto.EchoResponse.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.EchoResponse} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.EchoResponse.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      message: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      value: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EchoResponse}\n */\n\n\nproto.EchoResponse.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EchoResponse();\n  return proto.EchoResponse.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EchoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EchoResponse}\n */\n\n\nproto.EchoResponse.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMessage(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setValue(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.EchoResponse.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.EchoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EchoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.EchoResponse.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getValue();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * optional string message = 1;\n * @return {string}\n */\n\n\nproto.EchoResponse.prototype.getMessage = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.EchoResponse.prototype.setMessage = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string value = 2;\n * @return {string}\n */\n\n\nproto.EchoResponse.prototype.getValue = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.EchoResponse.prototype.setValue = function (value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.ServerStreamingEchoRequest = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.ServerStreamingEchoRequest, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.ServerStreamingEchoRequest.displayName = 'proto.ServerStreamingEchoRequest';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.ServerStreamingEchoRequest.prototype.toObject = function (opt_includeInstance) {\n    return proto.ServerStreamingEchoRequest.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.ServerStreamingEchoRequest} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.ServerStreamingEchoRequest.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      message: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      messageCount: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      messageInterval: jspb.Message.getFieldWithDefault(msg, 3, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.ServerStreamingEchoRequest}\n */\n\n\nproto.ServerStreamingEchoRequest.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.ServerStreamingEchoRequest();\n  return proto.ServerStreamingEchoRequest.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.ServerStreamingEchoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.ServerStreamingEchoRequest}\n */\n\n\nproto.ServerStreamingEchoRequest.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMessage(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setMessageCount(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setMessageInterval(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.ServerStreamingEchoRequest.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.ServerStreamingEchoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.ServerStreamingEchoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.ServerStreamingEchoRequest.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getMessageCount();\n\n  if (f !== 0) {\n    writer.writeInt32(2, f);\n  }\n\n  f = message.getMessageInterval();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n};\n/**\n * optional string message = 1;\n * @return {string}\n */\n\n\nproto.ServerStreamingEchoRequest.prototype.getMessage = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.ServerStreamingEchoRequest.prototype.setMessage = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional int32 message_count = 2;\n * @return {number}\n */\n\n\nproto.ServerStreamingEchoRequest.prototype.getMessageCount = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.ServerStreamingEchoRequest.prototype.setMessageCount = function (value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * optional int32 message_interval = 3;\n * @return {number}\n */\n\n\nproto.ServerStreamingEchoRequest.prototype.getMessageInterval = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.ServerStreamingEchoRequest.prototype.setMessageInterval = function (value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.ServerStreamingEchoResponse = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.ServerStreamingEchoResponse, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.ServerStreamingEchoResponse.displayName = 'proto.ServerStreamingEchoResponse';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.ServerStreamingEchoResponse.prototype.toObject = function (opt_includeInstance) {\n    return proto.ServerStreamingEchoResponse.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.ServerStreamingEchoResponse} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.ServerStreamingEchoResponse.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      message: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.ServerStreamingEchoResponse}\n */\n\n\nproto.ServerStreamingEchoResponse.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.ServerStreamingEchoResponse();\n  return proto.ServerStreamingEchoResponse.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.ServerStreamingEchoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.ServerStreamingEchoResponse}\n */\n\n\nproto.ServerStreamingEchoResponse.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMessage(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.ServerStreamingEchoResponse.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.ServerStreamingEchoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.ServerStreamingEchoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.ServerStreamingEchoResponse.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string message = 1;\n * @return {string}\n */\n\n\nproto.ServerStreamingEchoResponse.prototype.getMessage = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.ServerStreamingEchoResponse.prototype.setMessage = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.EchoStatusRequest = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.EchoStatusRequest, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.EchoStatusRequest.displayName = 'proto.EchoStatusRequest';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.EchoStatusRequest.prototype.toObject = function (opt_includeInstance) {\n    return proto.EchoStatusRequest.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.EchoStatusRequest} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.EchoStatusRequest.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      status: jspb.Message.getFieldWithDefault(msg, 1, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EchoStatusRequest}\n */\n\n\nproto.EchoStatusRequest.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EchoStatusRequest();\n  return proto.EchoStatusRequest.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EchoStatusRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EchoStatusRequest}\n */\n\n\nproto.EchoStatusRequest.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!proto.Status} */\n        reader.readEnum();\n        msg.setStatus(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.EchoStatusRequest.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.EchoStatusRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EchoStatusRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.EchoStatusRequest.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getStatus();\n\n  if (f !== 0.0) {\n    writer.writeEnum(1, f);\n  }\n};\n/**\n * optional Status status = 1;\n * @return {!proto.Status}\n */\n\n\nproto.EchoStatusRequest.prototype.getStatus = function () {\n  return (\n    /** @type {!proto.Status} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {!proto.Status} value */\n\n\nproto.EchoStatusRequest.prototype.setStatus = function (value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.EchoStatusResponse = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.EchoStatusResponse, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.EchoStatusResponse.displayName = 'proto.EchoStatusResponse';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.EchoStatusResponse.prototype.toObject = function (opt_includeInstance) {\n    return proto.EchoStatusResponse.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.EchoStatusResponse} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.EchoStatusResponse.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      status: jspb.Message.getFieldWithDefault(msg, 1, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EchoStatusResponse}\n */\n\n\nproto.EchoStatusResponse.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EchoStatusResponse();\n  return proto.EchoStatusResponse.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EchoStatusResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EchoStatusResponse}\n */\n\n\nproto.EchoStatusResponse.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!proto.EchoStatusResponse.InternalStatus} */\n        reader.readEnum();\n        msg.setStatus(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.EchoStatusResponse.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.EchoStatusResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EchoStatusResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.EchoStatusResponse.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getStatus();\n\n  if (f !== 0.0) {\n    writer.writeEnum(1, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.EchoStatusResponse.InternalStatus = {\n  UNKNOWN: 0,\n  SUCCESS: 1\n};\n/**\n * optional InternalStatus status = 1;\n * @return {!proto.EchoStatusResponse.InternalStatus}\n */\n\nproto.EchoStatusResponse.prototype.getStatus = function () {\n  return (\n    /** @type {!proto.EchoStatusResponse.InternalStatus} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {!proto.EchoStatusResponse.InternalStatus} value */\n\n\nproto.EchoStatusResponse.prototype.setStatus = function (value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n/**\n * @enum {number}\n */\n\n\nproto.Status = {\n  UNKNOWN: 0,\n  SUCCESS: 1\n};\ngoog.object.extend(exports, proto);","map":{"version":3,"sources":["/home/juan/node_projects/js-client/src/pb/proto_pb.js"],"names":["jspb","require","goog","global","Function","exportSymbol","proto","EchoRequest","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","message","getFieldWithDefault","value","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","readString","setMessage","readInt32","setValue","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","undefined","getMessage","length","writeString","getValue","writeInt32","setProto3StringField","setProto3IntField","EchoResponse","ServerStreamingEchoRequest","messageCount","messageInterval","setMessageCount","setMessageInterval","getMessageCount","getMessageInterval","ServerStreamingEchoResponse","EchoStatusRequest","status","readEnum","setStatus","getStatus","writeEnum","setProto3EnumField","EchoStatusResponse","InternalStatus","UNKNOWN","SUCCESS","Status","object","extend","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAlB;;AACA,IAAIC,IAAI,GAAGF,IAAX;AACA,IAAIG,MAAM,GAAGC,QAAQ,CAAC,aAAD,CAAR,EAAb;AAEAF,IAAI,CAACG,YAAL,CAAkB,mBAAlB,EAAuC,IAAvC,EAA6CF,MAA7C;AACAD,IAAI,CAACG,YAAL,CAAkB,oBAAlB,EAAwC,IAAxC,EAA8CF,MAA9C;AACAD,IAAI,CAACG,YAAL,CAAkB,yBAAlB,EAA6C,IAA7C,EAAmDF,MAAnD;AACAD,IAAI,CAACG,YAAL,CAAkB,0BAAlB,EAA8C,IAA9C,EAAoDF,MAApD;AACAD,IAAI,CAACG,YAAL,CAAkB,yCAAlB,EAA6D,IAA7D,EAAmEF,MAAnE;AACAD,IAAI,CAACG,YAAL,CAAkB,kCAAlB,EAAsD,IAAtD,EAA4DF,MAA5D;AACAD,IAAI,CAACG,YAAL,CAAkB,mCAAlB,EAAuD,IAAvD,EAA6DF,MAA7D;AACAD,IAAI,CAACG,YAAL,CAAkB,cAAlB,EAAkC,IAAlC,EAAwCF,MAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAG,KAAK,CAACC,WAAN,GAAoB,UAASC,QAAT,EAAmB;AACrCR,EAAAA,IAAI,CAACS,OAAL,CAAaC,UAAb,CAAwB,IAAxB,EAA8BF,QAA9B,EAAwC,CAAxC,EAA2C,CAAC,CAA5C,EAA+C,IAA/C,EAAqD,IAArD;AACD,CAFD;;AAGAN,IAAI,CAACS,QAAL,CAAcL,KAAK,CAACC,WAApB,EAAiCP,IAAI,CAACS,OAAtC;;AACA,IAAIP,IAAI,CAACU,KAAL,IAAc,CAACC,QAAnB,EAA6B;AAC3BP,EAAAA,KAAK,CAACC,WAAN,CAAkBO,WAAlB,GAAgC,mBAAhC;AACD;;AAGD,IAAId,IAAI,CAACS,OAAL,CAAaM,kBAAjB,EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,EAAAA,KAAK,CAACC,WAAN,CAAkBS,SAAlB,CAA4BC,QAA5B,GAAuC,UAASC,mBAAT,EAA8B;AACnE,WAAOZ,KAAK,CAACC,WAAN,CAAkBU,QAAlB,CAA2BC,mBAA3B,EAAgD,IAAhD,CAAP;AACD,GAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,EAAAA,KAAK,CAACC,WAAN,CAAkBU,QAAlB,GAA6B,UAASE,eAAT,EAA0BC,GAA1B,EAA+B;AAC1D,QAAIC,CAAJ;AAAA,QAAOC,GAAG,GAAG;AACXC,MAAAA,OAAO,EAAEvB,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,EAAzC,CADE;AAEXK,MAAAA,KAAK,EAAEzB,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,CAAzC;AAFI,KAAb;;AAKA,QAAID,eAAJ,EAAqB;AACnBG,MAAAA,GAAG,CAACI,oBAAJ,GAA2BN,GAA3B;AACD;;AACD,WAAOE,GAAP;AACD,GAVD;AAWC;AAGD;AACA;AACA;AACA;AACA;;;AACAhB,KAAK,CAACC,WAAN,CAAkBoB,iBAAlB,GAAsC,UAASC,KAAT,EAAgB;AACpD,MAAIC,MAAM,GAAG,IAAI7B,IAAI,CAAC8B,YAAT,CAAsBF,KAAtB,CAAb;AACA,MAAIR,GAAG,GAAG,IAAId,KAAK,CAACC,WAAV,EAAV;AACA,SAAOD,KAAK,CAACC,WAAN,CAAkBwB,2BAAlB,CAA8CX,GAA9C,EAAmDS,MAAnD,CAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,KAAK,CAACC,WAAN,CAAkBwB,2BAAlB,GAAgD,UAASX,GAAT,EAAcS,MAAd,EAAsB;AACpE,SAAOA,MAAM,CAACG,SAAP,EAAP,EAA2B;AACzB,QAAIH,MAAM,CAACI,UAAP,EAAJ,EAAyB;AACvB;AACD;;AACD,QAAIC,KAAK,GAAGL,MAAM,CAACM,cAAP,EAAZ;;AACA,YAAQD,KAAR;AACA,WAAK,CAAL;AACE,YAAIT,KAAK;AAAG;AAAuBI,QAAAA,MAAM,CAACO,UAAP,EAAnC;AACAhB,QAAAA,GAAG,CAACiB,UAAJ,CAAeZ,KAAf;AACA;;AACF,WAAK,CAAL;AACE,YAAIA,KAAK;AAAG;AAAuBI,QAAAA,MAAM,CAACS,SAAP,EAAnC;AACAlB,QAAAA,GAAG,CAACmB,QAAJ,CAAad,KAAb;AACA;;AACF;AACEI,QAAAA,MAAM,CAACW,SAAP;AACA;AAXF;AAaD;;AACD,SAAOpB,GAAP;AACD,CArBD;AAwBA;AACA;AACA;AACA;;;AACAd,KAAK,CAACC,WAAN,CAAkBS,SAAlB,CAA4ByB,eAA5B,GAA8C,YAAW;AACvD,MAAIC,MAAM,GAAG,IAAI1C,IAAI,CAAC2C,YAAT,EAAb;AACArC,EAAAA,KAAK,CAACC,WAAN,CAAkBqC,uBAAlB,CAA0C,IAA1C,EAAgDF,MAAhD;AACA,SAAOA,MAAM,CAACG,eAAP,EAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvC,KAAK,CAACC,WAAN,CAAkBqC,uBAAlB,GAA4C,UAASrB,OAAT,EAAkBmB,MAAlB,EAA0B;AACpE,MAAIrB,CAAC,GAAGyB,SAAR;AACAzB,EAAAA,CAAC,GAAGE,OAAO,CAACwB,UAAR,EAAJ;;AACA,MAAI1B,CAAC,CAAC2B,MAAF,GAAW,CAAf,EAAkB;AAChBN,IAAAA,MAAM,CAACO,WAAP,CACE,CADF,EAEE5B,CAFF;AAID;;AACDA,EAAAA,CAAC,GAAGE,OAAO,CAAC2B,QAAR,EAAJ;;AACA,MAAI7B,CAAC,KAAK,CAAV,EAAa;AACXqB,IAAAA,MAAM,CAACS,UAAP,CACE,CADF,EAEE9B,CAFF;AAID;AACF,CAhBD;AAmBA;AACA;AACA;AACA;;;AACAf,KAAK,CAACC,WAAN,CAAkBS,SAAlB,CAA4B+B,UAA5B,GAAyC,YAAW;AAClD;AAAO;AAAuB/C,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,EAA1C;AAA9B;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACC,WAAN,CAAkBS,SAAlB,CAA4BqB,UAA5B,GAAyC,UAASZ,KAAT,EAAgB;AACvDzB,EAAAA,IAAI,CAACS,OAAL,CAAa2C,oBAAb,CAAkC,IAAlC,EAAwC,CAAxC,EAA2C3B,KAA3C;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACC,WAAN,CAAkBS,SAAlB,CAA4BkC,QAA5B,GAAuC,YAAW;AAChD;AAAO;AAAuBlD,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,CAA1C;AAA9B;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACC,WAAN,CAAkBS,SAAlB,CAA4BuB,QAA5B,GAAuC,UAASd,KAAT,EAAgB;AACrDzB,EAAAA,IAAI,CAACS,OAAL,CAAa4C,iBAAb,CAA+B,IAA/B,EAAqC,CAArC,EAAwC5B,KAAxC;AACD,CAFD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACgD,YAAN,GAAqB,UAAS9C,QAAT,EAAmB;AACtCR,EAAAA,IAAI,CAACS,OAAL,CAAaC,UAAb,CAAwB,IAAxB,EAA8BF,QAA9B,EAAwC,CAAxC,EAA2C,CAAC,CAA5C,EAA+C,IAA/C,EAAqD,IAArD;AACD,CAFD;;AAGAN,IAAI,CAACS,QAAL,CAAcL,KAAK,CAACgD,YAApB,EAAkCtD,IAAI,CAACS,OAAvC;;AACA,IAAIP,IAAI,CAACU,KAAL,IAAc,CAACC,QAAnB,EAA6B;AAC3BP,EAAAA,KAAK,CAACgD,YAAN,CAAmBxC,WAAnB,GAAiC,oBAAjC;AACD;;AAGD,IAAId,IAAI,CAACS,OAAL,CAAaM,kBAAjB,EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,EAAAA,KAAK,CAACgD,YAAN,CAAmBtC,SAAnB,CAA6BC,QAA7B,GAAwC,UAASC,mBAAT,EAA8B;AACpE,WAAOZ,KAAK,CAACgD,YAAN,CAAmBrC,QAAnB,CAA4BC,mBAA5B,EAAiD,IAAjD,CAAP;AACD,GAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,EAAAA,KAAK,CAACgD,YAAN,CAAmBrC,QAAnB,GAA8B,UAASE,eAAT,EAA0BC,GAA1B,EAA+B;AAC3D,QAAIC,CAAJ;AAAA,QAAOC,GAAG,GAAG;AACXC,MAAAA,OAAO,EAAEvB,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,EAAzC,CADE;AAEXK,MAAAA,KAAK,EAAEzB,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,EAAzC;AAFI,KAAb;;AAKA,QAAID,eAAJ,EAAqB;AACnBG,MAAAA,GAAG,CAACI,oBAAJ,GAA2BN,GAA3B;AACD;;AACD,WAAOE,GAAP;AACD,GAVD;AAWC;AAGD;AACA;AACA;AACA;AACA;;;AACAhB,KAAK,CAACgD,YAAN,CAAmB3B,iBAAnB,GAAuC,UAASC,KAAT,EAAgB;AACrD,MAAIC,MAAM,GAAG,IAAI7B,IAAI,CAAC8B,YAAT,CAAsBF,KAAtB,CAAb;AACA,MAAIR,GAAG,GAAG,IAAId,KAAK,CAACgD,YAAV,EAAV;AACA,SAAOhD,KAAK,CAACgD,YAAN,CAAmBvB,2BAAnB,CAA+CX,GAA/C,EAAoDS,MAApD,CAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,KAAK,CAACgD,YAAN,CAAmBvB,2BAAnB,GAAiD,UAASX,GAAT,EAAcS,MAAd,EAAsB;AACrE,SAAOA,MAAM,CAACG,SAAP,EAAP,EAA2B;AACzB,QAAIH,MAAM,CAACI,UAAP,EAAJ,EAAyB;AACvB;AACD;;AACD,QAAIC,KAAK,GAAGL,MAAM,CAACM,cAAP,EAAZ;;AACA,YAAQD,KAAR;AACA,WAAK,CAAL;AACE,YAAIT,KAAK;AAAG;AAAuBI,QAAAA,MAAM,CAACO,UAAP,EAAnC;AACAhB,QAAAA,GAAG,CAACiB,UAAJ,CAAeZ,KAAf;AACA;;AACF,WAAK,CAAL;AACE,YAAIA,KAAK;AAAG;AAAuBI,QAAAA,MAAM,CAACO,UAAP,EAAnC;AACAhB,QAAAA,GAAG,CAACmB,QAAJ,CAAad,KAAb;AACA;;AACF;AACEI,QAAAA,MAAM,CAACW,SAAP;AACA;AAXF;AAaD;;AACD,SAAOpB,GAAP;AACD,CArBD;AAwBA;AACA;AACA;AACA;;;AACAd,KAAK,CAACgD,YAAN,CAAmBtC,SAAnB,CAA6ByB,eAA7B,GAA+C,YAAW;AACxD,MAAIC,MAAM,GAAG,IAAI1C,IAAI,CAAC2C,YAAT,EAAb;AACArC,EAAAA,KAAK,CAACgD,YAAN,CAAmBV,uBAAnB,CAA2C,IAA3C,EAAiDF,MAAjD;AACA,SAAOA,MAAM,CAACG,eAAP,EAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvC,KAAK,CAACgD,YAAN,CAAmBV,uBAAnB,GAA6C,UAASrB,OAAT,EAAkBmB,MAAlB,EAA0B;AACrE,MAAIrB,CAAC,GAAGyB,SAAR;AACAzB,EAAAA,CAAC,GAAGE,OAAO,CAACwB,UAAR,EAAJ;;AACA,MAAI1B,CAAC,CAAC2B,MAAF,GAAW,CAAf,EAAkB;AAChBN,IAAAA,MAAM,CAACO,WAAP,CACE,CADF,EAEE5B,CAFF;AAID;;AACDA,EAAAA,CAAC,GAAGE,OAAO,CAAC2B,QAAR,EAAJ;;AACA,MAAI7B,CAAC,CAAC2B,MAAF,GAAW,CAAf,EAAkB;AAChBN,IAAAA,MAAM,CAACO,WAAP,CACE,CADF,EAEE5B,CAFF;AAID;AACF,CAhBD;AAmBA;AACA;AACA;AACA;;;AACAf,KAAK,CAACgD,YAAN,CAAmBtC,SAAnB,CAA6B+B,UAA7B,GAA0C,YAAW;AACnD;AAAO;AAAuB/C,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,EAA1C;AAA9B;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACgD,YAAN,CAAmBtC,SAAnB,CAA6BqB,UAA7B,GAA0C,UAASZ,KAAT,EAAgB;AACxDzB,EAAAA,IAAI,CAACS,OAAL,CAAa2C,oBAAb,CAAkC,IAAlC,EAAwC,CAAxC,EAA2C3B,KAA3C;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACgD,YAAN,CAAmBtC,SAAnB,CAA6BkC,QAA7B,GAAwC,YAAW;AACjD;AAAO;AAAuBlD,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,EAA1C;AAA9B;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACgD,YAAN,CAAmBtC,SAAnB,CAA6BuB,QAA7B,GAAwC,UAASd,KAAT,EAAgB;AACtDzB,EAAAA,IAAI,CAACS,OAAL,CAAa2C,oBAAb,CAAkC,IAAlC,EAAwC,CAAxC,EAA2C3B,KAA3C;AACD,CAFD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACiD,0BAAN,GAAmC,UAAS/C,QAAT,EAAmB;AACpDR,EAAAA,IAAI,CAACS,OAAL,CAAaC,UAAb,CAAwB,IAAxB,EAA8BF,QAA9B,EAAwC,CAAxC,EAA2C,CAAC,CAA5C,EAA+C,IAA/C,EAAqD,IAArD;AACD,CAFD;;AAGAN,IAAI,CAACS,QAAL,CAAcL,KAAK,CAACiD,0BAApB,EAAgDvD,IAAI,CAACS,OAArD;;AACA,IAAIP,IAAI,CAACU,KAAL,IAAc,CAACC,QAAnB,EAA6B;AAC3BP,EAAAA,KAAK,CAACiD,0BAAN,CAAiCzC,WAAjC,GAA+C,kCAA/C;AACD;;AAGD,IAAId,IAAI,CAACS,OAAL,CAAaM,kBAAjB,EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,EAAAA,KAAK,CAACiD,0BAAN,CAAiCvC,SAAjC,CAA2CC,QAA3C,GAAsD,UAASC,mBAAT,EAA8B;AAClF,WAAOZ,KAAK,CAACiD,0BAAN,CAAiCtC,QAAjC,CAA0CC,mBAA1C,EAA+D,IAA/D,CAAP;AACD,GAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,EAAAA,KAAK,CAACiD,0BAAN,CAAiCtC,QAAjC,GAA4C,UAASE,eAAT,EAA0BC,GAA1B,EAA+B;AACzE,QAAIC,CAAJ;AAAA,QAAOC,GAAG,GAAG;AACXC,MAAAA,OAAO,EAAEvB,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,EAAzC,CADE;AAEXoC,MAAAA,YAAY,EAAExD,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,CAAzC,CAFH;AAGXqC,MAAAA,eAAe,EAAEzD,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,CAAzC;AAHN,KAAb;;AAMA,QAAID,eAAJ,EAAqB;AACnBG,MAAAA,GAAG,CAACI,oBAAJ,GAA2BN,GAA3B;AACD;;AACD,WAAOE,GAAP;AACD,GAXD;AAYC;AAGD;AACA;AACA;AACA;AACA;;;AACAhB,KAAK,CAACiD,0BAAN,CAAiC5B,iBAAjC,GAAqD,UAASC,KAAT,EAAgB;AACnE,MAAIC,MAAM,GAAG,IAAI7B,IAAI,CAAC8B,YAAT,CAAsBF,KAAtB,CAAb;AACA,MAAIR,GAAG,GAAG,IAAId,KAAK,CAACiD,0BAAV,EAAV;AACA,SAAOjD,KAAK,CAACiD,0BAAN,CAAiCxB,2BAAjC,CAA6DX,GAA7D,EAAkES,MAAlE,CAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,KAAK,CAACiD,0BAAN,CAAiCxB,2BAAjC,GAA+D,UAASX,GAAT,EAAcS,MAAd,EAAsB;AACnF,SAAOA,MAAM,CAACG,SAAP,EAAP,EAA2B;AACzB,QAAIH,MAAM,CAACI,UAAP,EAAJ,EAAyB;AACvB;AACD;;AACD,QAAIC,KAAK,GAAGL,MAAM,CAACM,cAAP,EAAZ;;AACA,YAAQD,KAAR;AACA,WAAK,CAAL;AACE,YAAIT,KAAK;AAAG;AAAuBI,QAAAA,MAAM,CAACO,UAAP,EAAnC;AACAhB,QAAAA,GAAG,CAACiB,UAAJ,CAAeZ,KAAf;AACA;;AACF,WAAK,CAAL;AACE,YAAIA,KAAK;AAAG;AAAuBI,QAAAA,MAAM,CAACS,SAAP,EAAnC;AACAlB,QAAAA,GAAG,CAACsC,eAAJ,CAAoBjC,KAApB;AACA;;AACF,WAAK,CAAL;AACE,YAAIA,KAAK;AAAG;AAAuBI,QAAAA,MAAM,CAACS,SAAP,EAAnC;AACAlB,QAAAA,GAAG,CAACuC,kBAAJ,CAAuBlC,KAAvB;AACA;;AACF;AACEI,QAAAA,MAAM,CAACW,SAAP;AACA;AAfF;AAiBD;;AACD,SAAOpB,GAAP;AACD,CAzBD;AA4BA;AACA;AACA;AACA;;;AACAd,KAAK,CAACiD,0BAAN,CAAiCvC,SAAjC,CAA2CyB,eAA3C,GAA6D,YAAW;AACtE,MAAIC,MAAM,GAAG,IAAI1C,IAAI,CAAC2C,YAAT,EAAb;AACArC,EAAAA,KAAK,CAACiD,0BAAN,CAAiCX,uBAAjC,CAAyD,IAAzD,EAA+DF,MAA/D;AACA,SAAOA,MAAM,CAACG,eAAP,EAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvC,KAAK,CAACiD,0BAAN,CAAiCX,uBAAjC,GAA2D,UAASrB,OAAT,EAAkBmB,MAAlB,EAA0B;AACnF,MAAIrB,CAAC,GAAGyB,SAAR;AACAzB,EAAAA,CAAC,GAAGE,OAAO,CAACwB,UAAR,EAAJ;;AACA,MAAI1B,CAAC,CAAC2B,MAAF,GAAW,CAAf,EAAkB;AAChBN,IAAAA,MAAM,CAACO,WAAP,CACE,CADF,EAEE5B,CAFF;AAID;;AACDA,EAAAA,CAAC,GAAGE,OAAO,CAACqC,eAAR,EAAJ;;AACA,MAAIvC,CAAC,KAAK,CAAV,EAAa;AACXqB,IAAAA,MAAM,CAACS,UAAP,CACE,CADF,EAEE9B,CAFF;AAID;;AACDA,EAAAA,CAAC,GAAGE,OAAO,CAACsC,kBAAR,EAAJ;;AACA,MAAIxC,CAAC,KAAK,CAAV,EAAa;AACXqB,IAAAA,MAAM,CAACS,UAAP,CACE,CADF,EAEE9B,CAFF;AAID;AACF,CAvBD;AA0BA;AACA;AACA;AACA;;;AACAf,KAAK,CAACiD,0BAAN,CAAiCvC,SAAjC,CAA2C+B,UAA3C,GAAwD,YAAW;AACjE;AAAO;AAAuB/C,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,EAA1C;AAA9B;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACiD,0BAAN,CAAiCvC,SAAjC,CAA2CqB,UAA3C,GAAwD,UAASZ,KAAT,EAAgB;AACtEzB,EAAAA,IAAI,CAACS,OAAL,CAAa2C,oBAAb,CAAkC,IAAlC,EAAwC,CAAxC,EAA2C3B,KAA3C;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACiD,0BAAN,CAAiCvC,SAAjC,CAA2C4C,eAA3C,GAA6D,YAAW;AACtE;AAAO;AAAuB5D,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,CAA1C;AAA9B;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACiD,0BAAN,CAAiCvC,SAAjC,CAA2C0C,eAA3C,GAA6D,UAASjC,KAAT,EAAgB;AAC3EzB,EAAAA,IAAI,CAACS,OAAL,CAAa4C,iBAAb,CAA+B,IAA/B,EAAqC,CAArC,EAAwC5B,KAAxC;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACiD,0BAAN,CAAiCvC,SAAjC,CAA2C6C,kBAA3C,GAAgE,YAAW;AACzE;AAAO;AAAuB7D,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,CAA1C;AAA9B;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACiD,0BAAN,CAAiCvC,SAAjC,CAA2C2C,kBAA3C,GAAgE,UAASlC,KAAT,EAAgB;AAC9EzB,EAAAA,IAAI,CAACS,OAAL,CAAa4C,iBAAb,CAA+B,IAA/B,EAAqC,CAArC,EAAwC5B,KAAxC;AACD,CAFD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACwD,2BAAN,GAAoC,UAAStD,QAAT,EAAmB;AACrDR,EAAAA,IAAI,CAACS,OAAL,CAAaC,UAAb,CAAwB,IAAxB,EAA8BF,QAA9B,EAAwC,CAAxC,EAA2C,CAAC,CAA5C,EAA+C,IAA/C,EAAqD,IAArD;AACD,CAFD;;AAGAN,IAAI,CAACS,QAAL,CAAcL,KAAK,CAACwD,2BAApB,EAAiD9D,IAAI,CAACS,OAAtD;;AACA,IAAIP,IAAI,CAACU,KAAL,IAAc,CAACC,QAAnB,EAA6B;AAC3BP,EAAAA,KAAK,CAACwD,2BAAN,CAAkChD,WAAlC,GAAgD,mCAAhD;AACD;;AAGD,IAAId,IAAI,CAACS,OAAL,CAAaM,kBAAjB,EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,EAAAA,KAAK,CAACwD,2BAAN,CAAkC9C,SAAlC,CAA4CC,QAA5C,GAAuD,UAASC,mBAAT,EAA8B;AACnF,WAAOZ,KAAK,CAACwD,2BAAN,CAAkC7C,QAAlC,CAA2CC,mBAA3C,EAAgE,IAAhE,CAAP;AACD,GAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,EAAAA,KAAK,CAACwD,2BAAN,CAAkC7C,QAAlC,GAA6C,UAASE,eAAT,EAA0BC,GAA1B,EAA+B;AAC1E,QAAIC,CAAJ;AAAA,QAAOC,GAAG,GAAG;AACXC,MAAAA,OAAO,EAAEvB,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,EAAzC;AADE,KAAb;;AAIA,QAAID,eAAJ,EAAqB;AACnBG,MAAAA,GAAG,CAACI,oBAAJ,GAA2BN,GAA3B;AACD;;AACD,WAAOE,GAAP;AACD,GATD;AAUC;AAGD;AACA;AACA;AACA;AACA;;;AACAhB,KAAK,CAACwD,2BAAN,CAAkCnC,iBAAlC,GAAsD,UAASC,KAAT,EAAgB;AACpE,MAAIC,MAAM,GAAG,IAAI7B,IAAI,CAAC8B,YAAT,CAAsBF,KAAtB,CAAb;AACA,MAAIR,GAAG,GAAG,IAAId,KAAK,CAACwD,2BAAV,EAAV;AACA,SAAOxD,KAAK,CAACwD,2BAAN,CAAkC/B,2BAAlC,CAA8DX,GAA9D,EAAmES,MAAnE,CAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,KAAK,CAACwD,2BAAN,CAAkC/B,2BAAlC,GAAgE,UAASX,GAAT,EAAcS,MAAd,EAAsB;AACpF,SAAOA,MAAM,CAACG,SAAP,EAAP,EAA2B;AACzB,QAAIH,MAAM,CAACI,UAAP,EAAJ,EAAyB;AACvB;AACD;;AACD,QAAIC,KAAK,GAAGL,MAAM,CAACM,cAAP,EAAZ;;AACA,YAAQD,KAAR;AACA,WAAK,CAAL;AACE,YAAIT,KAAK;AAAG;AAAuBI,QAAAA,MAAM,CAACO,UAAP,EAAnC;AACAhB,QAAAA,GAAG,CAACiB,UAAJ,CAAeZ,KAAf;AACA;;AACF;AACEI,QAAAA,MAAM,CAACW,SAAP;AACA;AAPF;AASD;;AACD,SAAOpB,GAAP;AACD,CAjBD;AAoBA;AACA;AACA;AACA;;;AACAd,KAAK,CAACwD,2BAAN,CAAkC9C,SAAlC,CAA4CyB,eAA5C,GAA8D,YAAW;AACvE,MAAIC,MAAM,GAAG,IAAI1C,IAAI,CAAC2C,YAAT,EAAb;AACArC,EAAAA,KAAK,CAACwD,2BAAN,CAAkClB,uBAAlC,CAA0D,IAA1D,EAAgEF,MAAhE;AACA,SAAOA,MAAM,CAACG,eAAP,EAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvC,KAAK,CAACwD,2BAAN,CAAkClB,uBAAlC,GAA4D,UAASrB,OAAT,EAAkBmB,MAAlB,EAA0B;AACpF,MAAIrB,CAAC,GAAGyB,SAAR;AACAzB,EAAAA,CAAC,GAAGE,OAAO,CAACwB,UAAR,EAAJ;;AACA,MAAI1B,CAAC,CAAC2B,MAAF,GAAW,CAAf,EAAkB;AAChBN,IAAAA,MAAM,CAACO,WAAP,CACE,CADF,EAEE5B,CAFF;AAID;AACF,CATD;AAYA;AACA;AACA;AACA;;;AACAf,KAAK,CAACwD,2BAAN,CAAkC9C,SAAlC,CAA4C+B,UAA5C,GAAyD,YAAW;AAClE;AAAO;AAAuB/C,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,EAA1C;AAA9B;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACwD,2BAAN,CAAkC9C,SAAlC,CAA4CqB,UAA5C,GAAyD,UAASZ,KAAT,EAAgB;AACvEzB,EAAAA,IAAI,CAACS,OAAL,CAAa2C,oBAAb,CAAkC,IAAlC,EAAwC,CAAxC,EAA2C3B,KAA3C;AACD,CAFD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACyD,iBAAN,GAA0B,UAASvD,QAAT,EAAmB;AAC3CR,EAAAA,IAAI,CAACS,OAAL,CAAaC,UAAb,CAAwB,IAAxB,EAA8BF,QAA9B,EAAwC,CAAxC,EAA2C,CAAC,CAA5C,EAA+C,IAA/C,EAAqD,IAArD;AACD,CAFD;;AAGAN,IAAI,CAACS,QAAL,CAAcL,KAAK,CAACyD,iBAApB,EAAuC/D,IAAI,CAACS,OAA5C;;AACA,IAAIP,IAAI,CAACU,KAAL,IAAc,CAACC,QAAnB,EAA6B;AAC3BP,EAAAA,KAAK,CAACyD,iBAAN,CAAwBjD,WAAxB,GAAsC,yBAAtC;AACD;;AAGD,IAAId,IAAI,CAACS,OAAL,CAAaM,kBAAjB,EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,EAAAA,KAAK,CAACyD,iBAAN,CAAwB/C,SAAxB,CAAkCC,QAAlC,GAA6C,UAASC,mBAAT,EAA8B;AACzE,WAAOZ,KAAK,CAACyD,iBAAN,CAAwB9C,QAAxB,CAAiCC,mBAAjC,EAAsD,IAAtD,CAAP;AACD,GAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,EAAAA,KAAK,CAACyD,iBAAN,CAAwB9C,QAAxB,GAAmC,UAASE,eAAT,EAA0BC,GAA1B,EAA+B;AAChE,QAAIC,CAAJ;AAAA,QAAOC,GAAG,GAAG;AACX0C,MAAAA,MAAM,EAAEhE,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,CAAzC;AADG,KAAb;;AAIA,QAAID,eAAJ,EAAqB;AACnBG,MAAAA,GAAG,CAACI,oBAAJ,GAA2BN,GAA3B;AACD;;AACD,WAAOE,GAAP;AACD,GATD;AAUC;AAGD;AACA;AACA;AACA;AACA;;;AACAhB,KAAK,CAACyD,iBAAN,CAAwBpC,iBAAxB,GAA4C,UAASC,KAAT,EAAgB;AAC1D,MAAIC,MAAM,GAAG,IAAI7B,IAAI,CAAC8B,YAAT,CAAsBF,KAAtB,CAAb;AACA,MAAIR,GAAG,GAAG,IAAId,KAAK,CAACyD,iBAAV,EAAV;AACA,SAAOzD,KAAK,CAACyD,iBAAN,CAAwBhC,2BAAxB,CAAoDX,GAApD,EAAyDS,MAAzD,CAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,KAAK,CAACyD,iBAAN,CAAwBhC,2BAAxB,GAAsD,UAASX,GAAT,EAAcS,MAAd,EAAsB;AAC1E,SAAOA,MAAM,CAACG,SAAP,EAAP,EAA2B;AACzB,QAAIH,MAAM,CAACI,UAAP,EAAJ,EAAyB;AACvB;AACD;;AACD,QAAIC,KAAK,GAAGL,MAAM,CAACM,cAAP,EAAZ;;AACA,YAAQD,KAAR;AACA,WAAK,CAAL;AACE,YAAIT,KAAK;AAAG;AAA8BI,QAAAA,MAAM,CAACoC,QAAP,EAA1C;AACA7C,QAAAA,GAAG,CAAC8C,SAAJ,CAAczC,KAAd;AACA;;AACF;AACEI,QAAAA,MAAM,CAACW,SAAP;AACA;AAPF;AASD;;AACD,SAAOpB,GAAP;AACD,CAjBD;AAoBA;AACA;AACA;AACA;;;AACAd,KAAK,CAACyD,iBAAN,CAAwB/C,SAAxB,CAAkCyB,eAAlC,GAAoD,YAAW;AAC7D,MAAIC,MAAM,GAAG,IAAI1C,IAAI,CAAC2C,YAAT,EAAb;AACArC,EAAAA,KAAK,CAACyD,iBAAN,CAAwBnB,uBAAxB,CAAgD,IAAhD,EAAsDF,MAAtD;AACA,SAAOA,MAAM,CAACG,eAAP,EAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvC,KAAK,CAACyD,iBAAN,CAAwBnB,uBAAxB,GAAkD,UAASrB,OAAT,EAAkBmB,MAAlB,EAA0B;AAC1E,MAAIrB,CAAC,GAAGyB,SAAR;AACAzB,EAAAA,CAAC,GAAGE,OAAO,CAAC4C,SAAR,EAAJ;;AACA,MAAI9C,CAAC,KAAK,GAAV,EAAe;AACbqB,IAAAA,MAAM,CAAC0B,SAAP,CACE,CADF,EAEE/C,CAFF;AAID;AACF,CATD;AAYA;AACA;AACA;AACA;;;AACAf,KAAK,CAACyD,iBAAN,CAAwB/C,SAAxB,CAAkCmD,SAAlC,GAA8C,YAAW;AACvD;AAAO;AAA8BnE,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,CAA1C;AAArC;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACyD,iBAAN,CAAwB/C,SAAxB,CAAkCkD,SAAlC,GAA8C,UAASzC,KAAT,EAAgB;AAC5DzB,EAAAA,IAAI,CAACS,OAAL,CAAa4D,kBAAb,CAAgC,IAAhC,EAAsC,CAAtC,EAAyC5C,KAAzC;AACD,CAFD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,KAAK,CAACgE,kBAAN,GAA2B,UAAS9D,QAAT,EAAmB;AAC5CR,EAAAA,IAAI,CAACS,OAAL,CAAaC,UAAb,CAAwB,IAAxB,EAA8BF,QAA9B,EAAwC,CAAxC,EAA2C,CAAC,CAA5C,EAA+C,IAA/C,EAAqD,IAArD;AACD,CAFD;;AAGAN,IAAI,CAACS,QAAL,CAAcL,KAAK,CAACgE,kBAApB,EAAwCtE,IAAI,CAACS,OAA7C;;AACA,IAAIP,IAAI,CAACU,KAAL,IAAc,CAACC,QAAnB,EAA6B;AAC3BP,EAAAA,KAAK,CAACgE,kBAAN,CAAyBxD,WAAzB,GAAuC,0BAAvC;AACD;;AAGD,IAAId,IAAI,CAACS,OAAL,CAAaM,kBAAjB,EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,EAAAA,KAAK,CAACgE,kBAAN,CAAyBtD,SAAzB,CAAmCC,QAAnC,GAA8C,UAASC,mBAAT,EAA8B;AAC1E,WAAOZ,KAAK,CAACgE,kBAAN,CAAyBrD,QAAzB,CAAkCC,mBAAlC,EAAuD,IAAvD,CAAP;AACD,GAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,EAAAA,KAAK,CAACgE,kBAAN,CAAyBrD,QAAzB,GAAoC,UAASE,eAAT,EAA0BC,GAA1B,EAA+B;AACjE,QAAIC,CAAJ;AAAA,QAAOC,GAAG,GAAG;AACX0C,MAAAA,MAAM,EAAEhE,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiCJ,GAAjC,EAAsC,CAAtC,EAAyC,CAAzC;AADG,KAAb;;AAIA,QAAID,eAAJ,EAAqB;AACnBG,MAAAA,GAAG,CAACI,oBAAJ,GAA2BN,GAA3B;AACD;;AACD,WAAOE,GAAP;AACD,GATD;AAUC;AAGD;AACA;AACA;AACA;AACA;;;AACAhB,KAAK,CAACgE,kBAAN,CAAyB3C,iBAAzB,GAA6C,UAASC,KAAT,EAAgB;AAC3D,MAAIC,MAAM,GAAG,IAAI7B,IAAI,CAAC8B,YAAT,CAAsBF,KAAtB,CAAb;AACA,MAAIR,GAAG,GAAG,IAAId,KAAK,CAACgE,kBAAV,EAAV;AACA,SAAOhE,KAAK,CAACgE,kBAAN,CAAyBvC,2BAAzB,CAAqDX,GAArD,EAA0DS,MAA1D,CAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,KAAK,CAACgE,kBAAN,CAAyBvC,2BAAzB,GAAuD,UAASX,GAAT,EAAcS,MAAd,EAAsB;AAC3E,SAAOA,MAAM,CAACG,SAAP,EAAP,EAA2B;AACzB,QAAIH,MAAM,CAACI,UAAP,EAAJ,EAAyB;AACvB;AACD;;AACD,QAAIC,KAAK,GAAGL,MAAM,CAACM,cAAP,EAAZ;;AACA,YAAQD,KAAR;AACA,WAAK,CAAL;AACE,YAAIT,KAAK;AAAG;AAAyDI,QAAAA,MAAM,CAACoC,QAAP,EAArE;AACA7C,QAAAA,GAAG,CAAC8C,SAAJ,CAAczC,KAAd;AACA;;AACF;AACEI,QAAAA,MAAM,CAACW,SAAP;AACA;AAPF;AASD;;AACD,SAAOpB,GAAP;AACD,CAjBD;AAoBA;AACA;AACA;AACA;;;AACAd,KAAK,CAACgE,kBAAN,CAAyBtD,SAAzB,CAAmCyB,eAAnC,GAAqD,YAAW;AAC9D,MAAIC,MAAM,GAAG,IAAI1C,IAAI,CAAC2C,YAAT,EAAb;AACArC,EAAAA,KAAK,CAACgE,kBAAN,CAAyB1B,uBAAzB,CAAiD,IAAjD,EAAuDF,MAAvD;AACA,SAAOA,MAAM,CAACG,eAAP,EAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvC,KAAK,CAACgE,kBAAN,CAAyB1B,uBAAzB,GAAmD,UAASrB,OAAT,EAAkBmB,MAAlB,EAA0B;AAC3E,MAAIrB,CAAC,GAAGyB,SAAR;AACAzB,EAAAA,CAAC,GAAGE,OAAO,CAAC4C,SAAR,EAAJ;;AACA,MAAI9C,CAAC,KAAK,GAAV,EAAe;AACbqB,IAAAA,MAAM,CAAC0B,SAAP,CACE,CADF,EAEE/C,CAFF;AAID;AACF,CATD;AAYA;AACA;AACA;;;AACAf,KAAK,CAACgE,kBAAN,CAAyBC,cAAzB,GAA0C;AACxCC,EAAAA,OAAO,EAAE,CAD+B;AAExCC,EAAAA,OAAO,EAAE;AAF+B,CAA1C;AAKA;AACA;AACA;AACA;;AACAnE,KAAK,CAACgE,kBAAN,CAAyBtD,SAAzB,CAAmCmD,SAAnC,GAA+C,YAAW;AACxD;AAAO;AAAyDnE,IAAAA,IAAI,CAACS,OAAL,CAAae,mBAAb,CAAiC,IAAjC,EAAuC,CAAvC,EAA0C,CAA1C;AAAhE;AACD,CAFD;AAKA;;;AACAlB,KAAK,CAACgE,kBAAN,CAAyBtD,SAAzB,CAAmCkD,SAAnC,GAA+C,UAASzC,KAAT,EAAgB;AAC7DzB,EAAAA,IAAI,CAACS,OAAL,CAAa4D,kBAAb,CAAgC,IAAhC,EAAsC,CAAtC,EAAyC5C,KAAzC;AACD,CAFD;AAKA;AACA;AACA;;;AACAnB,KAAK,CAACoE,MAAN,GAAe;AACbF,EAAAA,OAAO,EAAE,CADI;AAEbC,EAAAA,OAAO,EAAE;AAFI,CAAf;AAKAvE,IAAI,CAACyE,MAAL,CAAYC,MAAZ,CAAmBC,OAAnB,EAA4BvE,KAA5B","sourcesContent":["/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.EchoRequest', null, global);\ngoog.exportSymbol('proto.EchoResponse', null, global);\ngoog.exportSymbol('proto.EchoStatusRequest', null, global);\ngoog.exportSymbol('proto.EchoStatusResponse', null, global);\ngoog.exportSymbol('proto.EchoStatusResponse.InternalStatus', null, global);\ngoog.exportSymbol('proto.ServerStreamingEchoRequest', null, global);\ngoog.exportSymbol('proto.ServerStreamingEchoResponse', null, global);\ngoog.exportSymbol('proto.Status', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.EchoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.EchoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.EchoRequest.displayName = 'proto.EchoRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.EchoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.EchoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.EchoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EchoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    message: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    value: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EchoRequest}\n */\nproto.EchoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EchoRequest;\n  return proto.EchoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EchoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EchoRequest}\n */\nproto.EchoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.EchoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.EchoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EchoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EchoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string message = 1;\n * @return {string}\n */\nproto.EchoRequest.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.EchoRequest.prototype.setMessage = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional int32 value = 2;\n * @return {number}\n */\nproto.EchoRequest.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.EchoRequest.prototype.setValue = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.EchoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.EchoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.EchoResponse.displayName = 'proto.EchoResponse';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.EchoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.EchoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.EchoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EchoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    message: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    value: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EchoResponse}\n */\nproto.EchoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EchoResponse;\n  return proto.EchoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EchoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EchoResponse}\n */\nproto.EchoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.EchoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.EchoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EchoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EchoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string message = 1;\n * @return {string}\n */\nproto.EchoResponse.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.EchoResponse.prototype.setMessage = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string value = 2;\n * @return {string}\n */\nproto.EchoResponse.prototype.getValue = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.EchoResponse.prototype.setValue = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.ServerStreamingEchoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.ServerStreamingEchoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.ServerStreamingEchoRequest.displayName = 'proto.ServerStreamingEchoRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.ServerStreamingEchoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.ServerStreamingEchoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.ServerStreamingEchoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.ServerStreamingEchoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    message: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    messageCount: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    messageInterval: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.ServerStreamingEchoRequest}\n */\nproto.ServerStreamingEchoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.ServerStreamingEchoRequest;\n  return proto.ServerStreamingEchoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.ServerStreamingEchoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.ServerStreamingEchoRequest}\n */\nproto.ServerStreamingEchoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setMessageCount(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setMessageInterval(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.ServerStreamingEchoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.ServerStreamingEchoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.ServerStreamingEchoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.ServerStreamingEchoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getMessageCount();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n  f = message.getMessageInterval();\n  if (f !== 0) {\n    writer.writeInt32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string message = 1;\n * @return {string}\n */\nproto.ServerStreamingEchoRequest.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.ServerStreamingEchoRequest.prototype.setMessage = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional int32 message_count = 2;\n * @return {number}\n */\nproto.ServerStreamingEchoRequest.prototype.getMessageCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.ServerStreamingEchoRequest.prototype.setMessageCount = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional int32 message_interval = 3;\n * @return {number}\n */\nproto.ServerStreamingEchoRequest.prototype.getMessageInterval = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.ServerStreamingEchoRequest.prototype.setMessageInterval = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.ServerStreamingEchoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.ServerStreamingEchoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.ServerStreamingEchoResponse.displayName = 'proto.ServerStreamingEchoResponse';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.ServerStreamingEchoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.ServerStreamingEchoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.ServerStreamingEchoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.ServerStreamingEchoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    message: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.ServerStreamingEchoResponse}\n */\nproto.ServerStreamingEchoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.ServerStreamingEchoResponse;\n  return proto.ServerStreamingEchoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.ServerStreamingEchoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.ServerStreamingEchoResponse}\n */\nproto.ServerStreamingEchoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.ServerStreamingEchoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.ServerStreamingEchoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.ServerStreamingEchoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.ServerStreamingEchoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string message = 1;\n * @return {string}\n */\nproto.ServerStreamingEchoResponse.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.ServerStreamingEchoResponse.prototype.setMessage = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.EchoStatusRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.EchoStatusRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.EchoStatusRequest.displayName = 'proto.EchoStatusRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.EchoStatusRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.EchoStatusRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.EchoStatusRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EchoStatusRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    status: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EchoStatusRequest}\n */\nproto.EchoStatusRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EchoStatusRequest;\n  return proto.EchoStatusRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EchoStatusRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EchoStatusRequest}\n */\nproto.EchoStatusRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.Status} */ (reader.readEnum());\n      msg.setStatus(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.EchoStatusRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.EchoStatusRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EchoStatusRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EchoStatusRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getStatus();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional Status status = 1;\n * @return {!proto.Status}\n */\nproto.EchoStatusRequest.prototype.getStatus = function() {\n  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.Status} value */\nproto.EchoStatusRequest.prototype.setStatus = function(value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.EchoStatusResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.EchoStatusResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.EchoStatusResponse.displayName = 'proto.EchoStatusResponse';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.EchoStatusResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.EchoStatusResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.EchoStatusResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EchoStatusResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    status: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EchoStatusResponse}\n */\nproto.EchoStatusResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EchoStatusResponse;\n  return proto.EchoStatusResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EchoStatusResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EchoStatusResponse}\n */\nproto.EchoStatusResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.EchoStatusResponse.InternalStatus} */ (reader.readEnum());\n      msg.setStatus(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.EchoStatusResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.EchoStatusResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EchoStatusResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EchoStatusResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getStatus();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.EchoStatusResponse.InternalStatus = {\n  UNKNOWN: 0,\n  SUCCESS: 1\n};\n\n/**\n * optional InternalStatus status = 1;\n * @return {!proto.EchoStatusResponse.InternalStatus}\n */\nproto.EchoStatusResponse.prototype.getStatus = function() {\n  return /** @type {!proto.EchoStatusResponse.InternalStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.EchoStatusResponse.InternalStatus} value */\nproto.EchoStatusResponse.prototype.setStatus = function(value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * @enum {number}\n */\nproto.Status = {\n  UNKNOWN: 0,\n  SUCCESS: 1\n};\n\ngoog.object.extend(exports, proto);\n"]},"metadata":{},"sourceType":"module"}