syntax = "proto3";

option go_package = "pb";

/* Subasta service */
message Subasta {
    int32 id = 1;
    string subasta = 2;
    string fecha = 3;
    bool activo = 4;
    int32 duracion = 5;
    int32 descanso = 6;
    string created_at = 7;
    string updated_at = 8;
}

message SubastaProducto {
    int32 id = 1;
    Producto producto = 2; // productos_id
    bool activo = 3;
    float oferta_final = 4;
    int32 subastas_ofertas_id_winner = 5;
    string status = 6;
    int32 orden = 7;
    string inicio = 8;
}

message SubastaProductoFinish {
    int32 id = 1;
    Producto producto = 2; // productos_id
    bool activo = 3;
    float oferta_final = 4;
    int32 subastas_ofertas_id_winner = 5;
    string status = 6;
    int32 orden = 7;
    string inicio = 8;
    string user = 9;
}

message SubastaProductos {
    repeated SubastaProducto subastas_productos = 1;
}

message SubastaId {
    string id = 1;
}

message Subastas {
    repeated Subasta subastas = 1;
}

message SubastaProductoId {
    int32 id = 1;
}

message SubastaIdTime{
    int32 id = 1;
    string time = 2;
}

message SubastaOferta {
    string user = 1;
    float oferta_precio = 2;
}

message SubastaOfertaCreate {
    int32 users_id = 1;
    float oferta_precio = 2;
    int32 subastas_productos_id = 3;
}

message Empty {}

service SubastaService {
    rpc GetWinner(SubastaProductoId) returns (SubastaProductoFinish){} // Muestre al oferta ganadora 
    rpc GetSubastaOfertaWinner(SubastaProductoId) returns (SubastaOferta){}
    rpc GetSubastas(Empty) returns (Subastas){}; // Listado de subastas disponibles
    rpc GetSubastaProductoEnSubasta(SubastaIdTime) returns (SubastaProducto){} // Obtener el producto en subasta actualmente
    rpc GetSubastaProductoEnEspera(SubastaId) returns (SubastaProducto){} // Obtener el producto en espera segun el tiempo actual (Hora Argentina)
    rpc GetSubasta(SubastaId) returns (Subasta) {}; // Get de una subasta en especifico
    rpc GetSubastaProductos(SubastaId) returns (SubastaProductos){} // Listado de productos en subasta
    rpc AddSubastaOferta(SubastaOfertaCreate) returns (Empty){} // Agrega una oferta
    rpc SetProductoEnSubasta(SubastaProductoId) returns (Empty){} // Habilita la subasta de un producto
    rpc SetProductoSubastado(SubastaProductoId) returns (Empty){} // Cambiar el stado de la subasta (subastado) 
    rpc GetStreamSubastaOfertas(SubastaProductoId) returns (stream SubastaOferta){} // Muestra las ofertas sobre un producto en subasta
    rpc GetStreamSubastaOfertaWinner(SubastaProductoId) returns (stream SubastaOferta){} // Muestre al oferta ganadora 
}

/* Cliente Service */
message Cliente {
    int32 id = 1;
    string cliente = 2;
    string cuit = 3;
    string direccion = 4;
    string ciudad = 5;
    string iva = 6;
}

message ClienteId {
    string id = 1;
}

service ClienteService {
    rpc GetCliente (ClienteId) returns (Cliente) {};
}

/* Producto Service */
message Producto {
    int32 id = 1;
    string producto = 2;
    string descripcion = 3;
    int32 stock = 4;
    float precio_inicial = 5;
    float precio_aumento = 6;
    float precio_subasta = 7;
    Cliente cliente = 8;
}

message ProductoId {
    string id = 1;
}


service ProductoService {
    rpc GetProducto(ProductoId) returns (Producto){};
}


/* Users Service */
message User {
    string id = 1;
    string name = 2;
    string email = 3;
    string password = 4;
    string created_at = 5;
    string updated_at = 6;
}

/* Login Service */
message LoginRequest {
    string email = 1;
    string password = 2;
}

message LoginResponse {
    string token = 1;
    string error = 2;
}

service LoginService {
    rpc Login(LoginRequest) returns (LoginResponse){};
}
